// <auto-generated />
using System;
using EventNet.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventNet.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventNet.Domain.Attendee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AttendeeType")
                        .HasColumnType("integer");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Attendee", "Attendee");

                    b.HasDiscriminator<int>("AttendeeType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EventNet.Domain.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Event", "Event");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "A conference for software developers to network and learn.",
                            EventDate = new DateTime(2025, 2, 7, 12, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Convention Center, City",
                            Name = "Annual Developer Conference"
                        });
                });

            modelBuilder.Entity("EventNet.Domain.BusinessAttendee", b =>
                {
                    b.HasBaseType("EventNet.Domain.Attendee");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfAttendees")
                        .HasColumnType("integer");

                    b.Property<string>("RegistrationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EventId = 1L,
                            PaymentType = 1,
                            Description = "Tech Corp's delegation attending the conference.",
                            LegalName = "Tech Corp Ltd",
                            NumberOfAttendees = 5,
                            RegistrationCode = "TC123456"
                        });
                });

            modelBuilder.Entity("EventNet.Domain.IndividualAttendee", b =>
                {
                    b.HasBaseType("EventNet.Domain.Attendee");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("IndividualDescription");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalIdCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            EventId = 1L,
                            PaymentType = 0,
                            Description = "John Doe attending as an individual.",
                            FirstName = "John",
                            LastName = "Doe",
                            PersonalIdCode = "39506036025"
                        });
                });

            modelBuilder.Entity("EventNet.Domain.Attendee", b =>
                {
                    b.HasOne("EventNet.Domain.Event", null)
                        .WithMany("Attendees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventNet.Domain.Event", b =>
                {
                    b.Navigation("Attendees");
                });
#pragma warning restore 612, 618
        }
    }
}
